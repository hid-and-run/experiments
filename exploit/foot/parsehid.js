var HIDSequenceParser = (function() {
    var Modifier = {
        NO: 0x00,
        CTRL: 0x01,
        SHIFT: 0x02,
        ALT: 0x04,
        WIN: 0x08,
        RCTRL: 0x10,
        RSHIFT: 0x20,
        RALT: 0x40,
        RWIN: 0x80
    };

    var Key = {
        NONE: 0,
        A: 4,
        B: 5,
        C: 6,
        D: 7,
        E: 8,
        F: 9,
        G: 10,
        H: 11,
        I: 12,
        J: 13,
        K: 14,
        L: 15,
        M: 16,
        N: 17,
        O: 18,
        P: 19,
        Q: 20,
        R: 21,
        S: 22,
        T: 23,
        U: 24,
        V: 25,
        W: 26,
        X: 27,
        Y: 28,
        Z: 29,
        N1: 30,
        N2: 31,
        N3: 32,
        N4: 33,
        N5: 34,
        N6: 35,
        N7: 36,
        N8: 37,
        N9: 38,
        N0: 39,
        ENTER: 40,
        ESCAPE: 41,
        BSPACE: 42,
        TAB: 43,
        SPACE: 44,
        MINUS: 45,
        EQUAL: 46,
        LBRACKET: 47,
        RBRACKET: 48,
        BSLASH: 49,
        NONUS_HASH: 50,
        SCOLON: 51,
        QUOTE: 52,
        GRAVE: 53,
        COMMA: 54,
        DOT: 55,
        SLASH: 56,
        CAPSLOCK: 57,
        F1: 58,
        F2: 59,
        F3: 60,
        F4: 61,
        F5: 62,
        F6: 63,
        F7: 64,
        F8: 65,
        F9: 66,
        F10: 67,
        F11: 68,
        F12: 69,
        PSCREEN: 70,
        SCROLLLOCK: 71,
        PAUSE: 72,
        INSERT: 73,
        HOME: 74,
        PGUP: 75,
        DELETE: 76,
        END: 77,
        PGDOWN: 78,
        RIGHT: 79,
        LEFT: 80,
        DOWN: 81,
        UP: 82,
        NUMLOCK: 83,
        KP_SLASH: 84,
        KP_ASTERISK: 85,
        KP_MINUS: 86,
        KP_PLUS: 87,
        KP_ENTER: 88,
        KP_1: 89,
        KP_2: 90,
        KP_3: 91,
        KP_4: 92,
        KP_5: 93,
        KP_6: 94,
        KP_7: 95,
        KP_8: 96,
        KP_9: 97,
        KP_0: 98,
        KP_DOT: 99,
        NONUS_BSLASH: 100,
        APPLICATION: 101,
        POWER: 102,
        KP_EQUAL: 103,
        F13: 104,
        F14: 105,
        F15: 106,
        F16: 107,
        F17: 108,
        F18: 109,
        F19: 110,
        F20: 111,
        F21: 112,
        F22: 113,
        F23: 114,
        F24: 115,
        EXECUTE: 116,
        PASTE: 125
    };
    
    
    function ord(val) {
        return val.charCodeAt(val);
    }
    
    function parseSequence(seq) {
        var keys = seq.split("\n");
        var arr = [];
        var line = 0;
        var err = [];
        for(let key of keys) {
            line++;
            key = key.trim().toUpperCase();
            if(key.length == 0) continue;
            if(key[0] == '#') continue;
            let parts = key.split(" ");
            
            var modifier = Modifier.NO;
            var modifier_lut = {
              "WIN": Modifier.WIN,
              "WINDOWS": Modifier.WIN,
              "CMD": Modifier.WIN,
              "GUI": Modifier.WIN,
              "COMMAND": Modifier.WIN,
              "CTRL": Modifier.CTRL,
              "STRG": Modifier.CTRL,
              "ALT": Modifier.ALT,
              "SHIFT": Modifier.SHIFT,
              "RCTRL": Modifier.RCTRL,
              "RSTRG": Modifier.RSTRG,
              "RALT": Modifier.RALT,
              "RSHIFT": Modifier.RSHIFT
            };
            
            for(let p of parts) {
                if(p in modifier_lut) {
                    modifier |= modifier_lut[p];
                    parts[parts.indexOf(p)] = "";
                }
            }
            console.log(key);
            console.log(modifier);
            
            var LUT = {
                "NO": Key.NONE,
                "NONE": Key.NONE,
                "ENTER": Key.ENTER,
                "RETURN": Key.ENTER,
                "ESC": Key.ESCAPE,
                "ESCAPE": Key.ESCAPE,
                "BACKSPACE": Key.BSPACE,
                "BSPACE": Key.BSPACE,
                "TAB": Key.TAB,
                "SPACE": Key.SPACE,
                "-": Key.MINUS,
                "=": Key.EQUAL,
                "(": Key.LBRACKET,
                ")": Key.RBRACKET,
                "\\": Key.BSLASH,
                ";": Key.SCOLON,
                "\"": Key.QUOTE,
                "`": Key.GRAVE,
                ",": Key.COMMA,
                ".": Key.DOT,
                "/": Key.SLASH,
                "#": Key.NONUS_HASH,
                "CAPSLOCK": Key.CAPSLOCK,
                "CAPS": Key.CAPSLOCK,
                "F1": Key.F1,
                "F2": Key.F2,
                "F3": Key.F3,
                "F4": Key.F4,
                "F5": Key.F5,
                "F6": Key.F6,
                "F7": Key.F7,
                "F8": Key.F8,
                "F9": Key.F9,
                "F10": Key.F10,
                "F11": Key.F11,
                "F12": Key.F12,
                "F13": Key.F13,
                "F14": Key.F14,
                "F15": Key.F15,
                "F16": Key.F16,
                "F17": Key.F17,
                "F18": Key.F18,
                "F19": Key.F19,
                "F20": Key.F20,
                "F21": Key.F21,
                "F22": Key.F22,
                "F23": Key.F23,
                "F24": Key.F24,
                "PRINT": Key.PSCREEN,
                "SCROLLLOCK": Key.SCROLLLOCK,
                "PAUSE": Key.PAUSE,
                "INSERT": Key.INSERT,
                "HOME": Key.HOME,
                "PGUP": Key.PGUP,
                "DELETE": Key.DELETE,
                "DEL": Key.DEL,
                "END": Key.END,
                "PGDOWN": Key.PGDOWN,
                "RIGHT": Key.RIGHT,
                "LEFT": Key.LEFT,
                "DOWN": Key.DOWN,
                "UP": Key.UP,
                "0": Key.N0,
                "APPLICATION": Key.APPLICATION,
                "POWER": Key.POWER,
                "EXECUTE": Key.EXECUTE,
                "PASTE": Key.PASTE
            };
            
            var char = 0;
            for(let k of parts) {
                if(k.length == 1 && ord(k) >= ord('A') && ord(k) <= ord('Z')) char = ord(k) - ord('A') + Key.A;
                else if(k.length == 1 && ord(k) >= ord('1') && ord(k) <= ord('9')) char = ord(k) - ord('1') + KEY.N1;
                else char = LUT[k];
                if(char != undefined) {
                    parts[parts.indexOf(k)] = "";
                    break;
                }
            }
            if(char == undefined) char = 0;
            
            errs = [];
            for(let p of parts) {
                if(p != "") errs.push(p);
            }
            if(errs.length != 0) {
                console.log("Error parsing line #" + line + ": Unknown token " + (errs.length == 1 ? "" : "s") + " " + errs.join(", "));
                err.push({line: line, tokens: errs});
            }
            console.log(char);
            
            arr.push([modifier, char]);
        }
        console.log(arr);
        return {keys: arr, errors: err};
    }
    
    return {
        parse: function(seq) {
            return parseSequence(seq);
        }
    }
})();
