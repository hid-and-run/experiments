import React from "react";
import { NavigatorExtended } from "../types/navigator.hid";
import { Button, Form } from "react-bootstrap";

import "./App.css";
import { HIDpp2Device } from "../devices/DeviceV2";
import { HIDpp1Device } from "../devices/DeviceV1";
import { HIDppDevice } from "../devices/Device";
import {
  ButtonBindingType,
  serializeProfileG500,
  toUint8,
} from "../types/utils";
import { ProfileG500, uint8 } from "../types/types";
import { DevicePages } from "../misc/memory";

const logitech_vid = 0x046d;
const usagepage = 0xff00; // vendor defined
const mouse_usage = 0x02; // src: https://usb.org/sites/default/files/hut1_3_0.pdf

function App() {
  const [macro, setMacro] = React.useState<string>(`WIN
DELAY
A
B
C
D
  `);
  const [logContent, setLogContent] = React.useState<string>("");
  const [device, setDevice] = React.useState<
    HIDpp1Device | HIDpp2Device | null
  >(null);
  const [deviceId, setDeviceId] = React.useState<uint8>(0xff);

  async function connectHIDDevice() {
    let devices = await (navigator as NavigatorExtended).hid!.requestDevice({
      filters: [
        {
          vendorId: logitech_vid,
          usage: mouse_usage,
          usagePage: usagepage,
        },
      ],
    });
    if (!devices) {
      return;
    }
    for (let hid_device of devices) {
      console.log(hid_device.productName);
      if (!hid_device.productName.includes(" G")) continue;
      try {
        if (!hid_device.opened) await hid_device.open();
        let hidpp_device = await new HIDppDevice(hid_device, deviceId).create();
        console.log(
          `Device: ${hid_device.productName}\nHID++ Version: ${hidpp_device.version}`
        );
        if (hidpp_device.version === "1.0")
          setDevice(
            new HIDpp1Device(hid_device, deviceId === 0x01 ? deviceId : 0x00)
          );
        else
          setDevice(
            new HIDpp2Device(hid_device, deviceId === 0x01 ? deviceId : 0xff)
          );
        break;
      } catch (err) {
        console.log(`Could not open: ${hid_device.productName}`);
        continue;
      }
    }
  }

  async function runG500s(device: HIDpp1Device) {
    // pages 6-17 are all 0xff
    let custom_profile: ProfileG500 = {
      led_color: [0xff, 0x00, 0x00],
      angle: 0x80,
      dpi_modes: [
        {
          x_resolution: [0x00, 0x10],
          y_resolution: [0x00, 0x10],
          led_status: [0xff, 0xff],
        },
        {
          x_resolution: [0x00, 0x10],
          y_resolution: [0x00, 0x10],
          led_status: [0xff, 0xff],
        },
        {
          x_resolution: [0x00, 0x10],
          y_resolution: [0x00, 0x10],
          led_status: [0xff, 0xff],
        },
        {
          x_resolution: [0x00, 0x10],
          y_resolution: [0x00, 0x10],
          led_status: [0xff, 0xff],
        },
        {
          x_resolution: [0x00, 0x10],
          y_resolution: [0x00, 0x10],
          led_status: [0xff, 0xff],
        },
      ],
      angle_correction: 0x00,
      default_dpi_mode: 0x00,
      lift_threshold: 0x10,
      unknown: 0x10,
      usb_refresh_rate: 0x00,
      button_bindings: [
        { type: ButtonBindingType.KEYBOARD, data: [0x00, 0x04] },
        { type: 0, data: [0x00, 0x00] }, // space for macro on right click
        { type: ButtonBindingType.KEYBOARD, data: [0x00, 0x06] },
        { type: ButtonBindingType.KEYBOARD, data: [0x00, 0x07] },
        { type: ButtonBindingType.KEYBOARD, data: [0x00, 0x08] },
        { type: ButtonBindingType.KEYBOARD, data: [0x00, 0x09] },
        { type: ButtonBindingType.KEYBOARD, data: [0x00, 0x10] },
        { type: ButtonBindingType.KEYBOARD, data: [0x00, 0x11] },
        { type: ButtonBindingType.KEYBOARD, data: [0x00, 0x12] },
        { type: ButtonBindingType.KEYBOARD, data: [0x00, 0x13] },
        { type: ButtonBindingType.KEYBOARD, data: [0x00, 0x14] },
        { type: ButtonBindingType.KEYBOARD, data: [0x00, 0x15] },
        { type: ButtonBindingType.KEYBOARD, data: [0x00, 0x16] },
      ],
    };

    let profile: Array<uint8> = serializeProfileG500(custom_profile);
    let macro_offset = toUint8(profile.length + 1);
    custom_profile.button_bindings[1] = {
      type: 0,
      data: [macro_offset, 0x00],
    };

    let serialized_macro = await device.serializeMacro(macro);
    let start_time = performance.now();
    await device.writeMemory(
      0,
      macro_offset,
      serialized_macro.length,
      serialized_macro
    );
    console.log("Macro written.");
    device.flush();

    // load profile
    await device.loadTemporaryProfile(custom_profile);
    console.log("Custom profile set.");
    console.log(`Duration: ${performance.now() - start_time}`);
  }

  async function run() {
    let device_name = "";
    if (device instanceof HIDpp1Device) {
      device_name = device.getProductName();
      await runG500s(device);
    } else if (device instanceof HIDpp2Device) {
      device_name = device.getProductName();
      console.log(`Device Name: ${device_name}`);
      console.log(`Device Index: ${device.getDeviceIndex()}`);
      let pages: number[][] = [];

      if (device_name.includes("G305")) {
        pages = DevicePages.G305;
        pages[2] = (await device.serializeMacro(macro))
          .concat(Array(device.pageSize).fill(0x00))
          .slice(0, device.pageSize);
      }

      if (device_name.includes("G502")) {
        pages = DevicePages.G502;
        pages[6] = (await device.serializeMacro(macro))
          .concat(Array(device.pageSize).fill(0x00))
          .slice(0, device.pageSize);
      }

      if (device_name.includes("G203")) {
        pages = DevicePages.G203;
      }

      let start_time = performance.now();
      await device.activateOnboard();
      for (let page: uint8 = 0; page < pages.length; page = toUint8(page + 1)) {
        await device.writePage(page, pages[page].map(toUint8));
      }
      console.log(`Duration: ${performance.now() - start_time}`);
    }
  }

  return (
    <>
      <h1 className="App-header">Logitech Experiment</h1>
      <div className="App-container">
        <div className="App-button-container">
          <Button
            variant="primary"
            disabled={!!device}
            onClick={connectHIDDevice}
          >
            Connect HID Device
          </Button>
          <Button variant="danger" disabled={!device} onClick={run}>
            Run
          </Button>
          <Form.Check
            type="checkbox"
            label="Is the Device ID = 1?"
            onChange={(event) => {
              setDeviceId(event.target.checked ? 0x01 : 0xff);
            }}
          />
        </div>
        <Form.Control
          as="textarea"
          rows={8}
          style={{
            width: "40%",
          }}
          value={macro}
          onChange={(event) => {
            setMacro(event.target.value);
          }}
        />
        <p id="log">{logContent}</p>
      </div>
    </>
  );
}

export default App;
