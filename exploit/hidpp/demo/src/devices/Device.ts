import { HIDDevice } from "../types/navigator.hid";
import { uint8 } from "../types/types";
import { toUint8, toReportId, reportId, toHex } from "../types/utils";

const DEBUG = true;

class HIDppDevice {
  protected device: HIDDevice;
  protected deviceIndex: uint8;
  public version: string;
  protected send_buffer: Array<[uint8, Uint8Array]>;
  protected receive_buffer: Array<[uint8, Uint8Array]>;
  protected sending: boolean;
  protected receiving: boolean;
  public pageSize : number;

  constructor(device: HIDDevice, deviceIndex: uint8) {
    this.device = device;
    this.deviceIndex = deviceIndex;
    this.version = "unknown";
    this.sending = false;
    this.receiving = false;
    this.send_buffer = [];
    this.receive_buffer = [];
    this.device.oninputreport = (event: any) => {
      if (event.reportId !== 16 && event.reportId !== 17)
        return;
      this.receive_buffer.push([
        event.reportId,
        new Uint8Array(event.data.buffer),
      ]);
    };
    this.pageSize = device.productName.includes("G502") ? 256 : 240;
  }

  async send(reportId: uint8, data: Uint8Array) {
    if (this.sending) this.send_buffer.push([reportId, data]);
    else {
      this.sending = true;
      await this.sendRaw(reportId, data);
      while (this.send_buffer.length > 0) {
        [reportId, data] = this.send_buffer[0];
        this.send_buffer.shift();
        await this.sendRaw(reportId, data);
      }
      this.sending = false;
    }
  }

  async flush() {
    if (DEBUG) {
      for (let [reportId, data] of this.receive_buffer)
      console.log(
        "   [FLUSH]   ",
        toHex(reportId),
        Array.from(data).map(toHex).join(" ")
      );    
    }
    this.receive_buffer = [];
  }

  async receive() {
    let val;
    if (this.receive_buffer.length > 0) {
      val = this.receive_buffer[0];
      this.receive_buffer.shift();
    } else val = await this.receiveRaw();
    if (DEBUG)
      console.log(
        "[RECV]   ",
        toHex(val[0]),
        Array.from(val[1]).map(toHex).join(" ")
      );
    return val;
  }

  async sendRaw(reportId: uint8, data: Uint8Array) {
    if (DEBUG)
      console.log(
        "[SEND]   ",
        toHex(reportId),
        Array.from(data).map(toHex).join(" ")
      );
    await this.device.sendReport(reportId, data);
  }

  async receiveRaw(): Promise<[uint8, Uint8Array]> {
    return new Promise((resolve) => {
      this.device.oninputreport = (event: any) => {
        if (event.reportId !== 16 && event.reportId !== 17)
          return;
        let arr = new Uint8Array(event.data.buffer);
        this.device.oninputreport = (event: any) => {
          if (event.reportId !== 16 && event.reportId !== 17)
            return;
          this.receive_buffer.push([
            event.reportId,
            new Uint8Array(event.data.buffer),
          ]);
        };
        return resolve([event.reportId, arr]);
      };
    });
  }

  async create() {
    this.version = await this.getProtocolVersion();
    return this;
  }

  async getProtocolVersion() {
    await this.send(
      reportId.LONG,
      Uint8Array.from([
        0xff, 0x00, 0x11, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ])
    );
    let [_, response] = await this.receive();
    if (response[1] !== 0) return `1.0`;
    return `${toUint8(response[3])}.${toUint8(response[4])}`;
  }

  getProductName() {
    return this.device.productName;
  }

  getDeviceIndex() {
    return this.deviceIndex;
  }
}

export { HIDppDevice };
