
var Type = {
    NONE: 0x00,
    KEYS: 0x01,
    MEDIA: 0x02,
    MOUSE: 0x03
};

var Layer = {
    LAYER1: 0x10,
    LAYER2: 0x20,
    LAYER3: 0x30
};

var Media = {
    PLAY: 0xcd,
    PREVIOUS: 0xb6,
    NEXT: 0xb5,
    MUTE: 0xe2,
    VOL_UP: 0xe9,
    VOL_DOWN: 0xea
};

var Mouse = {
    LEFT: 0x01,
    RIGHT: 0x02,
    MIDDLE: 0x04
};


async function openDevice() {
    const vendorId = 0x1189; // VID
    const productId = 0x8890; // PID

    const device_list = await navigator.hid.getDevices();
    console.log(device_list)

    let device = device_list.find(d => d.vendorId === vendorId && d.productId === productId);

    if (!device) {
        let devices = await navigator.hid.requestDevice({
            filters: [{
                vendorId,
                productId
            }],
        });
        console.log("devices: ", devices);
        device = devices[0];
        if (!device) return null;
    }

    if (!device.opened) {
        await device.open();
    }
    console.log("device opened: ", device);
    return device;
}

async function send(device, data) {
    try {
        await device.sendReport(3, data);
    } catch (error) {
        console.error("send failed", error);
    }
}

async function sendHello(device) {
    send(device, new Uint8Array(64));
}

async function sendKeyUpdateStart(device, layer) {
    let req = new Uint8Array(64);
    req[0] = 0xa1;
    req[1] = layer + 1;
    await send(device, req);
}

async function sendKeyUpdateEnd(device) {
    let req = new Uint8Array(64);
    req[0] = 0xaa;
    req[1] = 0xaa;
    await send(device, req);
}


function prepend(value, array) {
    var newArray = array.slice();
    newArray.unshift(value);
    return newArray;
}

async function programKey(device, key, layer, type, sequence) {
    await sendKeyUpdateStart(device, 0);

    // macro header
    var req = new Uint8Array(64);
    req[0] = key;
    req[1] = layer + type;
    req[2] = sequence.length;

    var combo = sequence;
    if (type == Type.KEYS) {
        // key sequences must start with a blank
        combo = prepend([0, 0], sequence);
    }
    // send keys
    var i = 0;
    for (s of combo) {
        req[3] = i;
        req[4] = s[0]; // modifier
        req[5] = s[1]; // key
        console.log(req);
        await send(device, req);
        i++;
    }

    await sendKeyUpdateEnd(device);
}




async function writeMacro(key, keys) {
    let device = await openDevice();
    if (!device) {
        console.log("Could not get device");
        return;
    }
    await sendHello(device);
    await programKey(device, key, Layer.LAYER1, Type.KEYS, keys);
    await device.close();
}

