var debug_packets = false;

var Key = {
    NONE: 0,
    A: 4,
    B: 5,
    C: 6,
    D: 7,
    E: 8,
    F: 9,
    G: 10,
    H: 11,
    I: 12,
    J: 13,
    K: 14,
    L: 15,
    M: 16,
    N: 17,
    O: 18,
    P: 19,
    Q: 20,
    R: 21,
    S: 22,
    T: 23,
    U: 24,
    V: 25,
    W: 26,
    X: 27,
    Y: 28,
    Z: 29,
    N1: 30,
    N2: 31,
    N3: 32,
    N4: 33,
    N5: 34,
    N6: 35,
    N7: 36,
    N8: 37,
    N9: 38,
    N0: 39,
    ENTER: 40,
    ESCAPE: 41,
    BSPACE: 42,
    TAB: 43,
    SPACE: 44,
    MINUS: 45,
    EQUAL: 46,
    LBRACKET: 47,
    RBRACKET: 48,
    BSLASH: 49,
    NONUS_HASH: 50,
    SCOLON: 51,
    QUOTE: 52,
    GRAVE: 53,
    COMMA: 54,
    DOT: 55,
    SLASH: 56,
    CAPSLOCK: 57,
    F1: 58,
    F2: 59,
    F3: 60,
    F4: 61,
    F5: 62,
    F6: 63,
    F7: 64,
    F8: 65,
    F9: 66,
    F10: 67,
    F11: 68,
    F12: 69,
    PSCREEN: 70,
    SCROLLLOCK: 71,
    PAUSE: 72,
    INSERT: 73,
    HOME: 74,
    PGUP: 75,
    DELETE: 76,
    END: 77,
    PGDOWN: 78,
    RIGHT: 79,
    LEFT: 80,
    DOWN: 81,
    UP: 82,
    NUMLOCK: 83,
    KP_SLASH: 84,
    KP_ASTERISK: 85,
    KP_MINUS: 86,
    KP_PLUS: 87,
    KP_ENTER: 88,
    KP_1: 89,
    KP_2: 90,
    KP_3: 91,
    KP_4: 92,
    KP_5: 93,
    KP_6: 94,
    KP_7: 95,
    KP_8: 96,
    KP_9: 97,
    KP_0: 98,
    KP_DOT: 99,
    NONUS_BSLASH: 100,
    APPLICATION: 101,
    POWER: 102,
    KP_EQUAL: 103,
    F13: 104,
    F14: 105,
    F15: 106,
    F16: 107,
    F17: 108,
    F18: 109,
    F19: 110,
    F20: 111,
    F21: 112,
    F22: 113,
    F23: 114,
    F24: 115,
    EXECUTE: 116,
    PASTE: 125,
    LEFT_CTRL: 0xe0,
    LEFT_SHIFT: 0xe1,
    LEFT_ALT: 0xe2,
    LEFT_META: 0xe3,
    RIGHT_CTRL: 0xe4,
    RIGHT_SHIFT: 0xe5,
    RIGHT_ALT: 0xe6,
    RIGHT_META: 0xe7
};

class Macro {
    
    constructor() {
        this.data = [{key: 0, delay: 1, len: 2}];
        this.len = 2;
    }
    
    press(key, delay = 10) {
        this.data.push({key: key, delay: (delay >> 1) + 0x80, len: 2});
        this.len += 2;
    }
    
    release(key, delay = 10) {
        this.data.push({key: key, delay: (delay >> 1), len: 2});
        this.len += 2;
    }
    
    pressAndRelease(key, delay = 10) {
        this.press(key, delay);
        this.release(key, delay);
    }
    
    delay(d) {
        this.release(0, d);
    }
    
    end() {
        this.data.push({key: 0, delay: 0, len: 2});
        this.len += 2;
    }
    
    get binary() {
        var len = Math.ceil(this.len / 8) * 8;
        var bin = new Uint8Array(len);
        var idx = 0;
        for(var i = 0; i < this.data.length; i++) {
            bin[idx] = this.data[i].delay;
            idx++;
            bin[idx] = this.data[i].key;
            idx++;
        }
        console.log(bin);
        return bin;
    }
    
    get assignment() {
        var bin = new Uint8Array(16);
        bin[0] = 1;
        bin[1] = this.data.length;
        bin[2] = 255;
        bin[5] = 0; // start TODO: calculate if there is more than one macro
        bin[6] = 4;
        return bin;
    }
    
};

function logClear() {
    document.getElementById("log").innerHTML = "";
}

function log(msg) {
    document.getElementById("log").innerHTML += "[LOG] " + msg + "\n";
}

async function openDevice() {
    const vendorId = 0x30fa; // VID
//     const productId = 0x1d01; // 0x1140; // PID
    const productId = 0x1140; // PID

    const device_list = await navigator.hid.getDevices();
    console.log(device_list)

    let device = device_list.find(d => d.vendorId === vendorId && d.productId === productId);

    if (!device) {
        let devices = await navigator.hid.requestDevice({
            filters: [{
                vendorId,
                productId
            }],
        });
        console.log("devices: ", devices);
        device = devices[0];
        if (!device) return null;
    }

    if (!device.opened) {
        await device.open();
    }
    console.log("device opened: ", device);
    return device;
}


async function openDeviceDebug() {
    const vendorId = 0x30fa; // VID
    const productId = 0x1d01; // PID

    const device_list = await navigator.hid.getDevices();
    console.log(device_list)

    let device = device_list.find(d => d.vendorId === vendorId && d.productId === productId);

    if (!device) {
        let devices = await navigator.hid.requestDevice({
            filters: [{
                vendorId,
                productId
            }],
        });
        console.log("devices: ", devices);
        device = devices[0];
        if (!device) return null;
    }

    if (!device.opened) {
        await device.open();
    }
    console.log("device opened: ", device);
    return device;
}

async function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function send(device, data) {
    try {
        await device.sendFeatureReport(7, data);
    } catch (error) {
        console.error("send failed", error);
    }
    //await delay(1);
    for(i = 0; i < 100000; i++) {}
}


function prepend(value, array) {
    var newArray = array.slice();
    newArray.unshift(value);
    return newArray;
}


async function sendBin(device, packet) {
    var req = new Uint8Array(16);
    for(var i = 0; i < packet.length / 2; i++) {
        req[i] = parseInt("0x" + packet.substr(i * 2, 2));
    }
    console.log(req);
    await send(device, req);
}

function hslToHex(h, s, l) {
  l /= 100;
  const a = s * Math.min(l, 1 - l) / 100;
  const f = n => {
    const k = (n + h / 30) % 12;
    const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    return Math.round(255 * color).toString(16).padStart(2, '0');   // convert to Hex and prefix "0" if needed
  };
  return `#${f(0)}${f(8)}${f(4)}`;
}

function highlight(packet) {
    if(packet.substr(0, 2) == "07") packet = packet.substr(2, 14);
    bg = {
        "00": "#cccccc",
        "01": "#ffaaaa",
        "02": "#aaffaa",
        "03": "#eeeeee",
        "04": "#aaffff",
        "05": "#ffffaa",
        "06": "#aaffaa",
        "07": "#aaffaa",
        "08": "#aaffaa",
        "09": "#cceeee",
        "10": "#ff88aa",
    };
    seq_bg = {
        "00": hslToHex(360, 100, 45),
        "01": hslToHex(360, 100, 50),
        "02": hslToHex(360, 100, 55),
        "03": hslToHex(360, 100, 60),
        "04": hslToHex(360, 100, 65),
        "05": hslToHex(360, 100, 70),
        "06": hslToHex(360, 100, 75),
        "07": hslToHex(360, 100, 80)
    };
    page_col = {
        "00": hslToHex(180, 100, 10),
        "01": hslToHex(180, 100, 30),
        "02": hslToHex(180, 100, 50),
        "03": hslToHex(180, 100, 70),
        "04": hslToHex(180, 100, 90)
    };
    
    cmd = packet.substr(2, 2);
    end = packet.substr(12, 2);
    
    format = packet.substr(0, 2) + " " + packet.substr(2, 2);
    if(cmd == "03") {
        format += " <span style='background-color: " + seq_bg[packet.substr(4, 2)] + ";'>" + packet.substr(4, 2) + "</span>";
    } else {
        format += " " + packet.substr(4, 2);
    }
    format += " " + packet.substr(6, 2);

    format += " <font color='" + page_col[packet.substr(8, 2)] + "'>" + packet.substr(8, 2) + "</font>";
    format += " <i>" + packet.substr(10, 2) + "</i>";
    format += " " + end;
    
    if(end == "00") format = "<b>" + format + "</b>";
    format = "<span style='background-color: " + bg[cmd] + ";'>" + format + "</span>";
    if(end != "00" && end != "07") format = "!!! " + format;
    
    if(cmd == "09") format = "\n" + format;
    if(cmd == "00") format += "\n";
    return format;
}

function highlightPackets() {
    packets = document.getElementById("hili").value.split("\n");
    document.getElementById("log").innerHTML = "";
    var html = "";
    for(let p of packets) {
        html += highlight(p) + "\n";
    }
    document.getElementById("log").innerHTML = html;
}

async function writeRaw() {
    let device = await openDevice();
    if (!device) {
        console.log("Could not get device");
        return;
    }
    packets = document.getElementById("hili").value.split("\n");
    document.getElementById("log").innerHTML = "";
    for(let p of packets) {
        if(p.substr(0, 2) == "07") p = p.substr(2, 14);
        await sendBin(device, p);
    }
    document.getElementById("log").innerHTML = "done";
}

async function sendPacket(device, cmd, index, offset, page, data, end = 0x7) {
    var req = new Uint8Array(16);
    req[0] = 0x18;
    req[1] = cmd;
    req[2] = index;
    req[3] = offset;
    req[4] = page;
    req[5] = data;
    req[6] = end;
    
    if(debug_packets) {
        var str = ""
        for(var i = 0; i < 7; i++) {
            str += req[i].toString(16).padStart(2, "0")
        }
    //     console.log(req);
        console.log(str);
        document.getElementById("log").innerHTML += highlight(str) + "\n";
    }
    await send(device, req);
}

async function startProgramming(device) {
    await sendPacket(device, 3, 0, 1, 0, 3, 0);
    await sendPacket(device, 9, 0, 1, 0, 0, 0);
    await sendPacket(device, 0, 0, 1, 0, 0, 0);
}

async function endProgramming(device) {
    await sendPacket(device, 0x10, 0, 0, 0, 0, 0);
    await sendPacket(device, 0, 0, 0, 0, 0, 0);
}


async function endBlock(device, id, page = 0) {
    await sendPacket(device, 9, 0, id, page, 0, 7); // block finish (?)
    await sendPacket(device, 0, 0, id, page, 0, 0); // block finalize (?)
}

async function startConfigureButtons(device) {
//     await sendPacket(device, 0, 0, 1, 0, 0, 0);
}

async function endConfigureButtons(device) {
    await sendPacket(device, 3, 0, 0x76, 0, 0, 0);
    await sendPacket(device, 0, 0, 0x76, 0, 0, 0);
    await sendPacket(device, 5, 0, 0x76, 0, 0, 0);
}

async function writeBlock(device, page, start, array) {
    index = start & 0x7;
    offset = start - index;
    blocks = Math.ceil(array.length / 8);
    cur_block = 0;
    last_block = array.length % 8;
    if(last_block == 0) last_block = 8;
    for(var i = 0; i < array.length; i++) {
        await sendPacket(device, 3, index, offset, page, array[i], cur_block == blocks - 1 ? last_block - 1 : 7);
        index++;
        if(index == 8) {
            await endBlock(device, offset, page);
            offset += 8;
            index = 0;
            if(offset >= 256) {
                offset = 0;
                page++;
            }
        }
        if(i && i % 8 == 0) cur_block++;
    }
    if(index != 0) await endBlock(device, offset, page);
}

async function programButton(device, key, keys) {
    log("Start programming mouse");
    await startProgramming(device);
    
    log("Sending button configuration");
    await startConfigureButtons(device);
    buttons = [0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x0, 0x35, 0x28];
    buttons[key] = keys;
    config = buttons
        .concat([0x00, 0x00, 0x30, 0x08, 0x58, 0xcd, 0x05, 0x18, 0x3f, 0x06, 0x00, 0x94, 0xff, 0x01, 0x00, 0x00, 0x1f, 0xff, 0xf0, 0x87, 0x0f, 0x0f, 0xf0, 0x8f, 0xff, 0x00, 0xb0, 0x0f, 0xff, 0xf0, 0xf0, 0x0f, 0x00, 0x47, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x01, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x6e])
        .concat(buttons)
        .concat([0x00, 0x00, 0x01])
        .concat(buttons)
        .concat([0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00])
        .concat(buttons)
        .concat([0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04]);
    await writeBlock(device, 0, 0x8, config);
    
    await endConfigureButtons(device);
    
    
    log("Compiling macro");
    var macro = new Macro();

//     macro.press(Key.LEFT_META);
//     macro.pressAndRelease(Key.R);
//     macro.release(Key.LEFT_META);
//     macro.delay(200);
//     macro.pressAndRelease(Key.C);
//     macro.pressAndRelease(Key.M);
//     macro.pressAndRelease(Key.D);
//     macro.pressAndRelease(Key.ENTER);
//     macro.end();
   
//     macro.press(Key.LEFT_META);
//     macro.pressAndRelease(Key.R);
//     macro.release(Key.LEFT_META);
//     macro.delay(200);
//     macro.press(Key.LEFT_CTRL);
//     macro.pressAndRelease(Key.V);
//     macro.release(Key.LEFT_CTRL);
//     macro.delay(200);
//     macro.pressAndRelease(Key.ENTER);
//     macro.end();
    
    macro.pressAndRelease(Key.B, 0);
    macro.pressAndRelease(Key.A, 0);
    macro.pressAndRelease(Key.A, 0);
    macro.pressAndRelease(Key.A, 0);
    macro.pressAndRelease(Key.A, 0);
    macro.end();
   
    
    log("Sending macro assignment");
    // macro assignment
    await writeBlock(device, 0, 0xa0, macro.assignment);
    
    log("Sending macro data");
    // macro data
    await writeBlock(device, 4, 0, macro.binary);
    
    log("Finish programming");
    await endProgramming(device);
}

async function writeMacro(key, keys) {
    let device = await openDevice();
    if (!device) {
        console.log("Could not get device");
        return;
    }
//     await sendHello(device);
//     await programKey(device, key, Layer.LAYER1, Type.KEYS, keys);
//     await tests(device, key);
    logClear();
    var start = performance.now();
    await programButton(device, key, keys);
    ms = Math.round(performance.now() - start);
    log("Done! Took " + ms + "ms");
    await device.close();
}

async function factoryReset() {
    let device = await openDeviceDebug();
    if (!device) {
        console.log("Could not get device");
        return;
    }
    logClear();
    log("Factory reset, plesae wait...");
    for(let p of factory_reset_data) {
        if(p.substr(0, 2) == "07") p = p.substr(2, 14);
        await sendBin(device, p);
    }
    log("Done! Unplug and plug in the mouse!");
}
